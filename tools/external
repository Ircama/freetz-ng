#! /usr/bin/env bash
#external by cuma
[ "$EXTERNAL_ENABLED" == "y" ] || error 1 "external is used by make"

mkdir -p "${EXTERNAL_MOD_DIR}"

#preparation for Downloader outsourcing
OUT_DIR="outboard"
OUT_CONF="downloader.conf"
MESSAGE="EXTERNAL SCRIPT:"
if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
	if [ -e "$OUT_DIR" ]; then
		echo1 "\"$(pwd)/$OUT_DIR\" is used as directory for outsourced files"
		echo1 "all existing files in this directory will be rewritten"
	else
		echo1 "creating directory \"$(pwd)/$OUT_DIR\" for outsourced files"
		mkdir $OUT_DIR
		[ $? -ne 0 ] && error 1 "$MESSAGE Directory \"$OUT_DIR\" cannot be created"
	fi
	if [ -e "$OUT_DIR/$OUT_CONF" ]; then
		echo1 "removing old Downloader configuration file $OUT_DIR/$OUT_CONF"
		rm "$OUT_DIR/$OUT_CONF"
		[ $? -ne 0 ] && error 1 "$MESSAGE $OUT_DIR/$OUT_CONF cannot be deleted"
	fi
	echo1 "creating new Downloader configuration file $OUT_DIR/$OUT_CONF"
	touch "$OUT_DIR/$OUT_CONF"
fi

#external services
for EXTERNAL_SERVICE in make/pkgs/*/external.services; do
	source $EXTERNAL_SERVICE
done
#.pkg files
echo $EXTERNAL_SERVICES > "${VARTAR_MOD_DIR}/var/mod/etc/external.pkg"
if [ "$EXTERNAL_CREATEPAK_DYNAMIC" != "y" ]; then
	cat "${VARTAR_MOD_DIR}/var/mod/etc/external.pkg" > "${EXTERNAL_MOD_DIR}/external.pkg"
else
	touch "${EXTERNAL_MOD_DIR}/external.pkg"
	for pkg in $EXTERNAL_SERVICES; do
		mkdir -p "${EXTERNAL_MOD_DIR}-${pkg}"
		echo "${pkg}" > "${EXTERNAL_MOD_DIR}-${pkg}/${pkg}.pkg"
	done
fi

#dynamic files
if [ "$EXTERNAL_DYNAMIC" == "y" ]; then
	# search files
	for pkg in $EXTERNAL_SERVICES; do
		pkg_ver="${pkg}-$(cat "$PACKAGES_DIR/.${pkg}")"
		# check if along with ${pkg} a package named ${pkg}-cgi is available, for some packages (e.g. openvpn, ppp, transmission)
		# pkg-files (rc.$pkg, etc.) are provided by the package named ${pkg}-cgi and not by ${pkg}.
		pkg_files="$(collect_pkg_files ${pkg} ${pkg}-cgi ${pkg}-v2-cgi)"

		for file in $pkg_files; do
			case $file in
				/etc/default.$pkg/*|/etc/init.d/rc.*|/etc/onlinechanged/*|/etc/cron.d/*|/usr/lib/cgi-bin/$pkg*)
					[ "$EXTERNAL_DYNAMIC_SCRIPTS" != "y" ] && continue
					;;
			esac
			EXTERNAL_DYNAMIC_FILES+=" $file"
		done
	done
fi

#own files
EXTERNAL_FILES="$EXTERNAL_OWN_FILES $EXTERNAL_DYNAMIC_FILES"
for EXT_FILE in make/pkgs/*/external.files make/libs/*/external.files; do
	if [ "$EXTERNAL_DYNAMIC" == "y" ]; then
		pkg=$(basename "${EXT_FILE%/external.files}")
		echo "$EXTERNAL_SERVICES" | grep -qE "(^| )${pkg}( |$)" && continue
	fi
	source $EXT_FILE
done
EXTERNAL_FILES=$(echo $EXTERNAL_FILES | sed -e 's| |\n/|g;s|//\+|/|g' | sort -u)

# Special handling for GCC_TOOLCHAIN_ARCHIVE marker
# If found, unpack its contents to external/ and remove the marker directory
if echo "$EXTERNAL_FILES" | grep -q "/GCC_TOOLCHAIN_ARCHIVE"; then
	if [ -d "${FILESYSTEM_MOD_DIR}/GCC_TOOLCHAIN_ARCHIVE" ]; then
		echo1 "Unpacking GCC_TOOLCHAIN_ARCHIVE..."
		# Move all contents from GCC_TOOLCHAIN_ARCHIVE/* to external/
		for item in "${FILESYSTEM_MOD_DIR}/GCC_TOOLCHAIN_ARCHIVE"/*; do
			if [ -e "$item" ]; then
				item_name=$(basename "$item")
				echo2 "  Moving GCC_TOOLCHAIN_ARCHIVE/$item_name to external/$item_name"
				# Check if target already exists and merge if needed
				if [ -d "$item" ] && [ -d "${EXTERNAL_MOD_DIR}/$item_name" ]; then
					# Merge directories recursively
					echo2 "    Merging with existing $item_name..."
					cp -a "$item"/* "${EXTERNAL_MOD_DIR}/$item_name/" 2>/dev/null || true
					rm -rf "$item"
				elif [ -e "${EXTERNAL_MOD_DIR}/$item_name" ]; then
					# Target exists but conflict - skip with warning
					warn "$MESSAGE ${EXTERNAL_MOD_DIR}/$item_name already exists, skipping GCC_TOOLCHAIN_ARCHIVE/$item_name"
					rm -rf "$item"
				else
					# Normal move
					mv "$item" "${EXTERNAL_MOD_DIR}/"
				fi
			fi
		done
		# Remove empty marker directory
		rmdir "${FILESYSTEM_MOD_DIR}/GCC_TOOLCHAIN_ARCHIVE" 2>/dev/null
		
		# Create symlinks in filesystem for GCC toolchain
		echo2 "  Creating symlinks for GCC toolchain..."
		
		# 1. Symlink binaries in /usr/bin
		if [ -d "${EXTERNAL_MOD_DIR}/usr/bin" ]; then
			mkdir -p "${FILESYSTEM_MOD_DIR}/usr/bin"
			for gcc_bin in "${EXTERNAL_MOD_DIR}/usr/bin"/{gcc,g++,cpp,cc,c++,gcov,gcov-tool,gcov-dump,as,ld,ar,ranlib,nm,objdump,objcopy,strip,strings,readelf,addr2line}; do
				if [ -e "$gcc_bin" ]; then
					bin_name=$(basename "$gcc_bin")
					ln -sf "/mod/external/usr/bin/$bin_name" "${FILESYSTEM_MOD_DIR}/usr/bin/$bin_name"
					echo2 "    Linked /usr/bin/$bin_name -> /mod/external/usr/bin/$bin_name"
				fi
			done
		fi
		
		# 2. Symlink headers from /mod/external/usr/include to /usr/include
		if [ -d "${EXTERNAL_MOD_DIR}/usr/include" ]; then
			mkdir -p "${FILESYSTEM_MOD_DIR}/usr/include"
			# Symlink each item (files AND directories) from external/usr/include to filesystem/usr/include
			for item in "${EXTERNAL_MOD_DIR}/usr/include"/*; do
				if [ -e "$item" ]; then
					item_name=$(basename "$item")
					# Skip if already exists (like python2.7, python3.13, linux)
					if [ ! -e "${FILESYSTEM_MOD_DIR}/usr/include/$item_name" ]; then
						ln -sf "/mod/external/usr/include/$item_name" "${FILESYSTEM_MOD_DIR}/usr/include/$item_name"
						if [ -d "$item" ]; then
							echo2 "    Linked /usr/include/$item_name/ -> /mod/external/usr/include/$item_name/ (directory)"
						else
							echo2 "    Linked /usr/include/$item_name -> /mod/external/usr/include/$item_name (file)"
						fi
					fi
				fi
			done
		fi
		
		# 3. Fix library symlinks in external/usr/lib (ld-uClibc.so.*, libc.so.*)
		if [ -d "${EXTERNAL_MOD_DIR}/usr/lib" ]; then
			# Create symlinks to /mod/external/usr/lib/freetz/ for dynamic linker and libc
			for lib in ld-uClibc.so.0 ld-uClibc.so.1 libc.so.1; do
				if [ -e "${EXTERNAL_MOD_DIR}/usr/lib/freetz/$lib" ]; then
					ln -sf "/mod/external/usr/lib/freetz/$lib" "${EXTERNAL_MOD_DIR}/usr/lib/$lib"
					echo2 "    Fixed external/usr/lib/$lib -> /mod/external/usr/lib/freetz/$lib"
				fi
			done
		fi
		
		# 4. Symlink libraries from /mod/external/usr/lib to /usr/lib
		if [ -d "${EXTERNAL_MOD_DIR}/usr/lib" ]; then
			mkdir -p "${FILESYSTEM_MOD_DIR}/usr/lib"
			# Symlink each item (files AND directories) from external/usr/lib to filesystem/usr/lib
			for item in "${EXTERNAL_MOD_DIR}/usr/lib"/*; do
				if [ -e "$item" ]; then
					item_name=$(basename "$item")
					# Skip if already exists in filesystem
					if [ ! -e "${FILESYSTEM_MOD_DIR}/usr/lib/$item_name" ]; then
						ln -sf "/mod/external/usr/lib/$item_name" "${FILESYSTEM_MOD_DIR}/usr/lib/$item_name"
						if [ -d "$item" ]; then
							echo2 "    Linked /usr/lib/$item_name/ -> /mod/external/usr/lib/$item_name/ (directory)"
						else
							echo2 "    Linked /usr/lib/$item_name -> /mod/external/usr/lib/$item_name (file)"
						fi
					fi
				fi
			done
		fi
		
		echo1 "GCC_TOOLCHAIN_ARCHIVE unpacked successfully"
	fi
	# Remove marker from EXTERNAL_FILES list to avoid processing it again
	EXTERNAL_FILES=$(echo "$EXTERNAL_FILES" | grep -v "/GCC_TOOLCHAIN_ARCHIVE")
fi

for EXTERNAL_FILE in $EXTERNAL_FILES; do
	FILENAME=$(basename $EXTERNAL_FILE)
	if [ -L "${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE" -a "$EXTERNAL_LINKS" != "y" ]; then
		warn "$MESSAGE ${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE is a symbolic link. It will not be processed"
	else
		IS_SCRIPT=n
		EXTERNAL_LINKSUBDIR=""
		EXTERNAL_TARGETDIR="${EXTERNAL_MOD_DIR}"
		#subdir
		if [ "$EXTERNAL_SUBDIRS" == "y" ]; then
			EXTERNAL_LINKSUBDIR="$(dirname $EXTERNAL_FILE)"
			EXTERNAL_TARGETDIR+="$EXTERNAL_LINKSUBDIR"
			mkdir -p "$EXTERNAL_TARGETDIR"
			#script
			case $EXTERNAL_FILE in
				/etc/cron.d/*|/etc/default.*|/etc/init.d/rc.*|/etc/onlinechanged/*|/usr/lib/cgi-bin/*)
					IS_SCRIPT=y
					;;
			esac
		fi
		#downloader
		EXTERNAL_TEMP="${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE"
		if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
			[ "$IS_SCRIPT" != "n" ] && continue
			FILEPERM=$(ls -l $EXTERNAL_TEMP | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o",k)}')
			echo2 "packing $FILENAME.gz for Downloader"
			gzip -c "$EXTERNAL_TEMP" > "$OUT_DIR/$FILENAME.gz"
			[ $? -ne 0 ] && error 1 "$MESSAGE $OUT_DIR/$FILENAME.gz cannot be created"
		fi
		#move file
		if [ `ls "$EXTERNAL_TEMP" 2>/dev/null | wc -l` -gt 0 ]; then
			[ -e "$EXTERNAL_TARGETDIR/$FILENAME" ] && error 1 "The file $EXTERNAL_TARGETDIR/$FILENAME already exists"
			mv "$EXTERNAL_TEMP" "$EXTERNAL_TARGETDIR/"
			EXTERNAL_MSG="moved"
			[ "$EXTERNAL_DOWNLOADER" == "y" ] && echo "$FILENAME $FILEPERM /mod/external$EXTERNAL_LINKSUBDIR" >> $OUT_DIR/$OUT_CONF
		else
			EXTERNAL_MSG="not found"
		fi

		#link file
		if [ "$IS_SCRIPT" != "n" ]; then
			EXTERNAL_LINKED=""
		else
			EXTERNAL_LINKED=" & linked"
			ln -s "/mod/external$EXTERNAL_LINKSUBDIR/$FILENAME" "${FILESYSTEM_MOD_DIR}$EXTERNAL_FILE"
		fi
		echo2 "$EXTERNAL_FILE ... $EXTERNAL_MSG$EXTERNAL_LINKED."
	fi
done

#directory for each service package
if [ "$EXTERNAL_CREATEPAK_DYNAMIC" == "y" ]; then
	for pkg in $EXTERNAL_SERVICES; do
		pkg_dir="${EXTERNAL_MOD_DIR}-${pkg}"
		pkg_ver="${pkg}-$(cat "$PACKAGES_DIR/.${pkg}")"
		# check if along with ${pkg} a package named ${pkg}-cgi is available, for some packages (e.g. openvpn, ppp, transmission)
		# pkg-files (rc.$pkg, etc.) are provided by the package named ${pkg}-cgi and not by ${pkg}.
		pkg_files="$(collect_pkg_files ${pkg} ${pkg}-cgi ${pkg}-v2-cgi)"

		for file in $pkg_files; do
			[ ! -e "${EXTERNAL_MOD_DIR}$file" ] && continue
			mkdir -p "${pkg_dir}${file%/*}"
			mv "${EXTERNAL_MOD_DIR}$file" "${pkg_dir}${file}"
		done
		touch "${pkg_dir}/.external"
	done
fi

#remove emtpy directories, dynamic leftover
for dir in $(echo $EXTERNAL_DYNAMIC_FILES | sort -ru); do
	rmdir "${FILESYSTEM_MOD_DIR}$dir" "${EXTERNAL_MOD_DIR}$dir" 2>/dev/null
	while [ "$dir" != "${dir%/*}" ]; do
		dir="${dir%/*}"
		rmdir "${FILESYSTEM_MOD_DIR}$dir" "${EXTERNAL_MOD_DIR}$dir" 2>/dev/null
	done
done

[ $(find $EXTERNAL_MOD_DIR -type f | wc -l) -gt 0 ] && touch "${EXTERNAL_MOD_DIR}/.external"
if [ "$EXTERNAL_DOWNLOADER" == "y" ]; then
	echo "  NOTE: Please upload zipped Downloader files from"
	echo "        \"$(pwd)/$OUT_DIR\" to your http or ftp server"
	echo "        and copy the Downloader configuration from"
	echo "        \"$(pwd)/$OUT_DIR/$OUT_CONF\" into Downloader WEBUI."
elif [ "$EXTERNAL_CREATEPAK" != "y" ]; then
	echo "  NOTE: Please copy content of build/modified/external/ to your box."
fi

